@Library("titan-library") _

pipeline {

    agent {label 'master' }

    environment {
        GITLAB_REPO     = 'https://gitlab.tinkarbuild.com/FDA-Shield/komet.git'
        GITHUB_OWNER    = "ikmdev"
        GITHUB_REPO     = "komet"
        GITHUB_REPO_GIT = "https://github.com/${GITHUB_OWNER}/${GITHUB_REPO}.git"
        GITHUB_RELEASE  = "https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/releases"

        WORKING_DIR     = 'sourceRepo'
        BRANCH          = 'main'
        RELEASE_NOTE    = ''
        VERSION         = ''
        MSG             = ''
        WEBHOOK_URL     = "${GLOBAL_CHATOPS_URL}"
        GITHUB_CREDS    = credentials('github_ikmdev-pat')
    }

    options {
        skipDefaultCheckout(false)
        timestamps()
        ansiColor('xterm')
    }

    stages {
        stage('Prep') {
            steps {

                // Clean the working dir
                sh "if [ -d $WORKING_DIR ]; then rm -Rf $WORKING_DIR; fi"

                // Get the release information
                script {
                    pomModel = readMavenPom(file: 'pom.xml')
                    pomVersion = pomModel.getVersion()
                    isSnapshot = pomVersion.contains("-SNAPSHOT")

                    repositoryId = 'maven-releases'
                    RELEASE_VERSION=pomVersion
                    RELEASE_MSG="release ${RELEASE_VERSION}"

                    echo "pomVersion: ${pomVersion}"
                    echo "isSnapshot: ${isSnapshot}"
                }

                sh "echo ${RELEASE_VERSION} '${RELEASE_MSG}'"
            }
        }

        stage('Tag') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'gitlab-for-ikmdev-release-token', gitToolName: '')]) {
                    sh "git clone ${GITLAB_REPO} $WORKING_DIR"
                }
                dir("$WORKING_DIR") {

                    // set no-reply email address
                    sh 'git config --global user.email "120604367+pmaheshm@users.noreply.github.com"'
                    sh 'git config --global user.name "pmaheshm"'
                    // sh 'git config --global http.version HTTP/1.1'

                    // See what remotes are currently present
                    sh 'git remote -v'

                    // add a remote repository
                    sh "git remote add downstream ${GITHUB_REPO_GIT}"

                    // See what remotes are now available
                    sh 'git remote -v'

                    // Get the latest tag
                    //sh 'git describe --abbrev=0 --tags'

                    // Tag the branch
                    // 
                    //sh "git tag -a ${RELEASE_VERSION} -m '${RELEASE_MSG}'"
                }
            }
        }

        stage('Deploy') {
            steps {
                dir("$WORKING_DIR") {
                    withCredentials([gitUsernamePassword(credentialsId: 'gitlab-for-ikmdev-release-token', gitToolName: '')]) {
                        // Tag the origin repo
                        sh "git push origin ${RELEASE_VERSION}"
                    }
                    withCredentials([gitUsernamePassword(credentialsId: 'github_ikmdev-pat', gitToolName: '')]) {
                        // reset the author information on your last commit
                        //sh "git commit --amend --reset-author -m 'releasing version 1.1.0'"

                        // Push the new tag to downstream remote
                        sh "git push --tags downstream"

                        // Push the branch to downstream remote
                        sh "git push downstream ${BRANCH}"
                    }
                }
            }
        }

        stage('Create Release') {

            environment {
                GITHUB_OWNER    = "ikmdev"
                GITHUB_REPO     = "komet"
                GITHUB_REPO_GIT = "https://github.com/${GITHUB_OWNER}/${GITHUB_REPO}.git"
                GITHUB_RELEASE  = "https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/releases"

                WORKING_DIR     = 'sourceRepo'
                BRANCH          = 'main'
                RELEASE_NOTE    = ''
                VERSION         = ''
                MSG             = ''
                WEBHOOK_URL     = "${GLOBAL_CHATOPS_URL}"
                GITHUB_CREDS    = credentials('github_ikmdev-pat')
            }


            when{
                expression{
                    branch=='main' && !isSnapshot
                }
            }
            steps {

                sh """
                    set -x
                    curl -u ${GITHUB_CREDS_USR}:${GITHUB_CREDS_PSW} -X POST -H 'Accept: application/vnd.github.v3+json' ${GITHUB_RELEASE} -d '{"tag_name":"${RELEASE_VERSION}","target_commitish":"main","name":"${RELEASE_MSG}","draft":false,"prerelease":false,"generate_release_notes":false,"body":"${RELEASE_MSG}"}'
                    echo "pushed to ikm github successfully"
                """

            }
        }

    }
}
