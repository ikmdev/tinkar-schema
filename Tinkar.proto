syntax = "proto3";

option java_multiple_files = true;
option java_package = "dev.ikm.tinkar.schema";
option java_outer_classname = "PBTinkar";

option csharp_namespace = "Tinkar.ProtoBuf.CS";

import "google/protobuf/timestamp.proto";

package Tinkar.ProtoBuf;

// Vertex id message.
message PBVertexId {
    // Unique vertex it. This is the 16 byte representation of a GUID.
    bytes Id = 1;
}

// Public id message.
// A public id is the base unique id for Tinkar concepts, semantics, and other publically
// identifiable Tinkar items.
message PBPublicId {
    // Unique Public id.
    // This is one or more 16 byte GUIDs.
    repeated bytes Id = 1 ;
}

// Public id list message.
// A list of public ids.
message PBPublicIdList {
  repeated PBPublicId PublicIds = 1 ;
}

// Field message.
// Fields are used in Vertex and SemanticVersion objects to store
// that can have varying types.
// Each message contains one field item and the data type of that field item.
message PBField {
    // Field value. This is one of the types defined in the protobuf message.
    oneof Value {
        // String value.
        string String = 1;

        // Boolean value.
        bool Bool = 2;

        // Int32 value.
        sint32 Int = 3;

        // Single precision floating point value.
        float Float = 4;

        // Byte string value.
        bytes Bytes = 5;

        // Time value.
        google.protobuf.Timestamp Time = 6;

        // Tinkar STAMP value.
        PBStampChronology Stamp = 20;

        // Tinkar Public id value.
        PBPublicId PublicId = 21;

        // Tinkar Vertex id value.
        PBVertexId VertexId = 22;

        // Tinkar Public id list value.
        PBPublicIdList PublicIdList = 23;

        // Tinkar Directed graph value.
        PBDiGraph DiGraph = 30;

        // Tinkar Directed tree value.
        PBDiTree DiTree = 31;

        // Tinkar Graph value.
        PBGraph Graph = 32;

        // Tinkar Vertex value.
        PBVertex Vertex = 33;

        // Tinkar Planar Point value
        PBPlanarPoint PlanarPoint = 40;

        // Tinkar Spatial Point value
        PBSpatialPoint SpatialPoint = 41;

        // Tinkar Int to Int Map
        PBIntToIntMap PBIntToIntMap = 50;

        // Tinkar Int to Multiple Int Map
        PBIntToMultipleIntMap PBIntToMultipleIntMap = 51;
    };
}

// Planar point value.
// Integer point on a 2 dimensional plane.
message PBPlanarPoint {
    // X position of point.
    sint32 X = 1;
    // Y position of point.
    sint32 Y = 2;
}

// Spatial point value.
// Integer point in a 3 dimensional space.
message PBSpatialPoint {
    // X position of point.
    sint32 X = 1;
    // Y position of point.
    sint32 Y = 2;
    // Z position of point.
    sint32 Z = 3;
}

// Integer to Integer Map.
// Maps one integer value to another integer value.
message PBIntToIntMap {
    // Source value.
    sint32 Source = 1;
    // Target value.
    sint32 Target = 2;
}

// Integer to Multiple Integer Map.
// Maps one integer value to multiple other integer values.
message PBIntToMultipleIntMap {
    // Source value.
    sint32 Source = 1;

    // Target values.
    repeated sint32 Target = 2;
}

// Directed Tree message.
// A directed tree is a tree with a single root. Each vertex in the Tree
// except the root contains a single predecessor, and may contain zero to many
// successors.
message PBDiTree {
    // List of all vertices in this DiTree. Each vertex contains a
    // VertexIndex which must match that vertex's index in this map.
    repeated PBVertex VertexMap = 1;

    // Root vertex.
    int32 Root = 2;

    // Maps each vertex with a predecessor to its predecessor.
    repeated PBIntToIntMap PredecesorMap = 3;

    // Maps each vertex with successors to its successors.
    repeated PBIntToMultipleIntMap SuccessorMap = 4;
}

// Directed Graph message.
// A directed graph is a graph with a multiple roots. Each vertex in the graph
// may contain zero to many successors and predecessors.
message PBDiGraph {
    // List of all vertices in this DiTree. Each vertex contains a
    // VertexIndex which must match that vertex's index in this map.
    repeated PBVertex VertexMap = 1;

    // List of all root vertices.
    repeated int32 RootSequence = 2;

    // Maps each vertex to its predecessors.
    repeated PBIntToMultipleIntMap SuccessorMap = 3;

    // Maps each vertex to its successors.
    repeated PBIntToMultipleIntMap PredecesorMap = 4;
}

// Graph message.
message PBGraph {
    // List of all vertices in this graph. Each vertex contains a
    // VertexIndex which must match that vertex's index in this map.
    repeated PBVertex VertexMap = 1;

    // Maps each vertex to its successors.
    repeated PBIntToMultipleIntMap SuccessorMap = 2;
}

// Vertex message.
message PBVertex {
    // Vertex property message
    message Property {
        // Concept identifying this property.
        PBPublicId PublicId = 1;

        // Value of this property.
        PBField Field = 2;
    }

    // Unique id for this vertex.
    PBVertexId VertexId = 1;

    // Vertex index if containers vertex map.
    int32 VertexIndex = 2;

    // Meaning of this vertex.
    PBPublicId Meaning = 3;

    // Properties for this vertex.
    repeated Property Properties = 4;
}

// Stamp Chronology message
// This contains a list of stamp vesions (a chronology)
message PBStampChronology {
    // Unique public id for this STAMP.
    PBPublicId PublicId = 1;

    // List of concept versions.
    repeated PBStampVersion StampVersions = 2;
}

// Stamp Version message
// This contains the info for a single version of a STAMP, sans the STAMP public id.
message PBStampVersion {
	// Status of the item this STAMP references.
	PBPublicId Status = 2;

	// Status of the item this STAMP references.
	PBPublicId Author = 3;

	// Module of the item this STAMP references.
	PBPublicId Module = 4;

	// Path of the item this STAMP references.
	PBPublicId Path = 5;

	// Creation time of the item this STAMP references.
	google.protobuf.Timestamp Time = 6;
}

// Concept Chronology message.
// This contains a chronology (multiple versions) of a single concept.
message PBConceptChronology {
    // Unique Public id of this concept.
    PBPublicId PublicId = 1;

    // List of concept versions.
    repeated PBConceptVersion ConceptVersions = 2;
}

// Concept Version message.
// This contains a version of a single concept.
message PBConceptVersion {
    // STAMP for this concept version.
    PBStampChronology Stamp = 2;
}


// Field definition message.
// Defines the information for a field in a pattern.
message PBFieldDefinition {
    // Meaning of the field.    
    PBPublicId Meaning = 1;

    // Data type of the field.
    PBPublicId DataType = 2;

    // Purpose of the field.
    PBPublicId Purpose = 3;

}

// Pattern chronology
// Contains multiple versions of pattern item.
message PBPatternChronology {
    // Unique Public id of this pattern chronology.
    PBPublicId PublicId = 1;

    // Versions of pattern.
    repeated PBPatternVersion Versions = 2;
}


// Pattern Version
// Single version of pattern item.
message PBPatternVersion {

    // STAMP for this version.
    PBStampChronology Stamp = 2;

    // Purpose of the Semantic that this pattern references.
    PBPublicId ReferencedComponentPurpose = 3;

    // Meaning of the Semantic that this pattern references.
    PBPublicId ReferencedComponentMeaning = 4;

    // Definitions for each field in the Semantic that this pattern references.
    repeated PBFieldDefinition FieldDefinitions = 5;
}

// Semantic Chronology.
// Contains list of Sematic versions.
message PBSemanticChronology {
    // Unique Public id of this semantic chronology.
    PBPublicId PublicId = 1;

    // ID of Concept that this semantic references.
    PBPublicId ReferencedComponent = 2;

    // ID of Pattern that defines the allowable fields in this semantic.
    PBPublicId PatternForSemantic = 3;

    // List of versions of this semantic.
    repeated PBSemanticVersion Versions = 4;
}

// Semantic Version.
// Single Sematic versions.
message PBSemanticVersion {
    // STAMP for this semantic version.
    PBStampChronology Stamp = 2;

    // Fields for this semantic. Each field defined is defined by
    // a matching entry in the pattern field definition list.
    repeated PBField Fields = 3;
}


// Tinkar Message. This is a wrapper around the Tinkar messages that may be seialized out to a persistent
// storage. This wrapper allows any of the indicated message types to be stored and when deserialized the type
// of the message can be determined.
message PBTinkarMsg {
    // Value of the message. This can be one and only one 
    // of the indicated types as defined in the protobuf description.
    oneof Value {

        // Message contains a Concept Chronology.
        PBConceptChronology ConceptChronology = 10;

        // Message contains a Semantic Chronology.
        PBSemanticChronology SemanticChronology = 20;

        // Message contains a Pattern Chronology.
        PBPatternChronology PatternChronology = 30;

        // Message contains a Stamp Chronology.
        PBStampChronology StampChronology = 40;
    };
}
